{"ast":null,"code":"var _jsxFileName = \"D:\\\\VScode\\\\Snake_Game\\\\snake-game\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\n\n// Game settings\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GRID_SIZE = 20;\nconst CELL_SIZE = 20;\nconst INITIAL_SPEED = 150; // ms per move\n\n// Directions (keyboard controls)\nconst DIRECTIONS = {\n  ArrowUp: {\n    x: 0,\n    y: -1\n  },\n  ArrowDown: {\n    x: 0,\n    y: 1\n  },\n  ArrowLeft: {\n    x: -1,\n    y: 0\n  },\n  ArrowRight: {\n    x: 1,\n    y: 0\n  }\n};\nfunction SnakeGame() {\n  _s();\n  // Game state\n  const [snake, setSnake] = useState([{\n    x: 10,\n    y: 10\n  }]); // Initial snake position\n  const [food, setFood] = useState({\n    x: 5,\n    y: 5\n  }); // Initial food position\n  const [direction, setDirection] = useState(DIRECTIONS.ArrowRight); // Initial direction\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isPaused, setIsPaused] = useState(false);\n\n  // Generate random food\n  const generateFood = () => {\n    const newFood = {\n      x: Math.floor(Math.random() * GRID_SIZE),\n      y: Math.floor(Math.random() * GRID_SIZE)\n    };\n    // Ensure food doesn't spawn on snake\n    if (snake.some(segment => segment.x === newFood.x && segment.y === newFood.y)) {\n      return generateFood();\n    }\n    return newFood;\n  };\n\n  // Handle keyboard input\n  const handleKeyPress = useCallback(e => {\n    if (e.key === ' ') {\n      setIsPaused(prev => !prev); // Space to pause\n      return;\n    }\n    const newDirection = DIRECTIONS[e.key];\n    if (newDirection) {\n      // Prevent 180° turns (e.g., moving right then left)\n      if (direction.x + newDirection.x !== 0 || direction.y + newDirection.y !== 0) {\n        setDirection(newDirection);\n      }\n    }\n  }, [direction]);\n\n  // Game loop\n  useEffect(() => {\n    if (gameOver || isPaused) return;\n    const moveSnake = () => {\n      setSnake(prevSnake => {\n        const head = {\n          ...prevSnake[0]\n        };\n        head.x += direction.x;\n        head.y += direction.y;\n\n        // Check collisions\n        if (head.x < 0 || head.x >= GRID_SIZE || head.y < 0 || head.y >= GRID_SIZE || prevSnake.some(segment => segment.x === head.x && segment.y === head.y)) {\n          setGameOver(true);\n          return prevSnake;\n        }\n        const newSnake = [head, ...prevSnake];\n        // Check if snake ate food\n        if (head.x === food.x && head.y === food.y) {\n          setFood(generateFood());\n          setScore(prev => prev + 1);\n        } else {\n          newSnake.pop(); // Remove tail if no food eaten\n        }\n        return newSnake;\n      });\n    };\n    const gameInterval = setInterval(moveSnake, INITIAL_SPEED);\n    return () => clearInterval(gameInterval);\n  }, [direction, food, gameOver, isPaused]);\n\n  // Keyboard event listener\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [handleKeyPress]);\n\n  // Reset game\n  const resetGame = () => {\n    setSnake([{\n      x: 10,\n      y: 10\n    }]);\n    setFood(generateFood());\n    setDirection(DIRECTIONS.ArrowRight);\n    setGameOver(false);\n    setScore(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      fontFamily: 'Arial'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uD83D\\uDC0D Snake Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), \" |\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsPaused(prev => !prev),\n        children: isPaused ? 'Resume' : 'Pause'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), \" |\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: GRID_SIZE * CELL_SIZE,\n        height: GRID_SIZE * CELL_SIZE,\n        border: '2px solid #333',\n        margin: '0 auto',\n        position: 'relative',\n        backgroundColor: '#f0f0f0'\n      },\n      children: [snake.map((segment, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          left: segment.x * CELL_SIZE,\n          top: segment.y * CELL_SIZE,\n          width: CELL_SIZE,\n          height: CELL_SIZE,\n          backgroundColor: i === 0 ? 'darkgreen' : 'green',\n          border: '1px solid white',\n          borderRadius: i === 0 ? '50%' : '2px'\n        }\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          left: food.x * CELL_SIZE,\n          top: food.y * CELL_SIZE,\n          width: CELL_SIZE,\n          height: CELL_SIZE,\n          backgroundColor: 'red',\n          borderRadius: '50%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Game Over! Final Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"Play Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Controls: Arrow keys to move | Space to pause\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n_s(SnakeGame, \"0WLOGCT09q5ePL0lNsMNkDTBRlQ=\");\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","jsxDEV","_jsxDEV","GRID_SIZE","CELL_SIZE","INITIAL_SPEED","DIRECTIONS","ArrowUp","x","y","ArrowDown","ArrowLeft","ArrowRight","SnakeGame","_s","snake","setSnake","food","setFood","direction","setDirection","gameOver","setGameOver","score","setScore","isPaused","setIsPaused","generateFood","newFood","Math","floor","random","some","segment","handleKeyPress","e","key","prev","newDirection","moveSnake","prevSnake","head","newSnake","pop","gameInterval","setInterval","clearInterval","window","addEventListener","removeEventListener","resetGame","style","textAlign","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","onClick","width","height","border","margin","position","backgroundColor","map","i","left","top","borderRadius","marginTop","_c","$RefreshReg$"],"sources":["D:/VScode/Snake_Game/snake-game/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\n\n// Game settings\nconst GRID_SIZE = 20;\nconst CELL_SIZE = 20;\nconst INITIAL_SPEED = 150; // ms per move\n\n// Directions (keyboard controls)\nconst DIRECTIONS = {\n  ArrowUp: { x: 0, y: -1 },\n  ArrowDown: { x: 0, y: 1 },\n  ArrowLeft: { x: -1, y: 0 },\n  ArrowRight: { x: 1, y: 0 },\n};\n\nfunction SnakeGame() {\n  // Game state\n  const [snake, setSnake] = useState([{ x: 10, y: 10 }]); // Initial snake position\n  const [food, setFood] = useState({ x: 5, y: 5 }); // Initial food position\n  const [direction, setDirection] = useState(DIRECTIONS.ArrowRight); // Initial direction\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isPaused, setIsPaused] = useState(false);\n\n  // Generate random food\n  const generateFood = () => {\n    const newFood = {\n      x: Math.floor(Math.random() * GRID_SIZE),\n      y: Math.floor(Math.random() * GRID_SIZE),\n    };\n    // Ensure food doesn't spawn on snake\n    if (snake.some(segment => segment.x === newFood.x && segment.y === newFood.y)) {\n      return generateFood();\n    }\n    return newFood;\n  };\n\n  // Handle keyboard input\n  const handleKeyPress = useCallback((e) => {\n    if (e.key === ' ') {\n      setIsPaused(prev => !prev); // Space to pause\n      return;\n    }\n    const newDirection = DIRECTIONS[e.key];\n    if (newDirection) {\n      // Prevent 180° turns (e.g., moving right then left)\n      if (direction.x + newDirection.x !== 0 || direction.y + newDirection.y !== 0) {\n        setDirection(newDirection);\n      }\n    }\n  }, [direction]);\n\n  // Game loop\n  useEffect(() => {\n    if (gameOver || isPaused) return;\n\n    const moveSnake = () => {\n      setSnake((prevSnake) => {\n        const head = { ...prevSnake[0] };\n        head.x += direction.x;\n        head.y += direction.y;\n\n        // Check collisions\n        if (\n          head.x < 0 || head.x >= GRID_SIZE ||\n          head.y < 0 || head.y >= GRID_SIZE ||\n          prevSnake.some(segment => segment.x === head.x && segment.y === head.y)\n        ) {\n          setGameOver(true);\n          return prevSnake;\n        }\n\n        const newSnake = [head, ...prevSnake];\n        // Check if snake ate food\n        if (head.x === food.x && head.y === food.y) {\n          setFood(generateFood());\n          setScore(prev => prev + 1);\n        } else {\n          newSnake.pop(); // Remove tail if no food eaten\n        }\n        return newSnake;\n      });\n    };\n\n    const gameInterval = setInterval(moveSnake, INITIAL_SPEED);\n    return () => clearInterval(gameInterval);\n  }, [direction, food, gameOver, isPaused]);\n\n  // Keyboard event listener\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [handleKeyPress]);\n\n  // Reset game\n  const resetGame = () => {\n    setSnake([{ x: 10, y: 10 }]);\n    setFood(generateFood());\n    setDirection(DIRECTIONS.ArrowRight);\n    setGameOver(false);\n    setScore(0);\n  };\n\n  return (\n    <div style={{ textAlign: 'center', fontFamily: 'Arial' }}>\n      <h1>🐍 Snake Game</h1>\n      <div style={{ marginBottom: '10px' }}>\n        <strong>Score: {score}</strong> | \n        <button onClick={() => setIsPaused(prev => !prev)}>\n          {isPaused ? 'Resume' : 'Pause'}\n        </button> |\n        <button onClick={resetGame}>Restart</button>\n      </div>\n      <div\n        style={{\n          width: GRID_SIZE * CELL_SIZE,\n          height: GRID_SIZE * CELL_SIZE,\n          border: '2px solid #333',\n          margin: '0 auto',\n          position: 'relative',\n          backgroundColor: '#f0f0f0',\n        }}\n      >\n        {/* Snake */}\n        {snake.map((segment, i) => (\n          <div\n            key={i}\n            style={{\n              position: 'absolute',\n              left: segment.x * CELL_SIZE,\n              top: segment.y * CELL_SIZE,\n              width: CELL_SIZE,\n              height: CELL_SIZE,\n              backgroundColor: i === 0 ? 'darkgreen' : 'green',\n              border: '1px solid white',\n              borderRadius: i === 0 ? '50%' : '2px',\n            }}\n          />\n        ))}\n        {/* Food */}\n        <div\n          style={{\n            position: 'absolute',\n            left: food.x * CELL_SIZE,\n            top: food.y * CELL_SIZE,\n            width: CELL_SIZE,\n            height: CELL_SIZE,\n            backgroundColor: 'red',\n            borderRadius: '50%',\n          }}\n        />\n      </div>\n      {gameOver && (\n        <div style={{ marginTop: '20px' }}>\n          <h2>Game Over! Final Score: {score}</h2>\n          <button onClick={resetGame}>Play Again</button>\n        </div>\n      )}\n      <p>Controls: Arrow keys to move | Space to pause</p>\n    </div>\n  );\n}\n\nexport default SnakeGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}