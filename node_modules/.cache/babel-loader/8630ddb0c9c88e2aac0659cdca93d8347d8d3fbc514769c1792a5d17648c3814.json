{"ast":null,"code":"var _jsxFileName = \"D:\\\\VScode\\\\Snake_Game\\\\snake-game\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport './App.css';\n\n// Dynamically calculate grid size and cell size\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst calculateGridSize = () => {\n  const maxGridWidth = Math.floor(window.innerWidth * 0.8 / 20); // 80% of screen width\n  const maxGridHeight = Math.floor(window.innerHeight * 0.8 / 20); // 80% of screen height\n  return Math.min(maxGridWidth, maxGridHeight);\n};\nconst CELL_SIZE = 20; // Fixed cell size\nconst GRID_SIZE = calculateGridSize(); // Dynamic grid size\nconst INITIAL_SPEED = 100;\nconst DIRECTIONS = {\n  ArrowUp: {\n    x: 0,\n    y: -1\n  },\n  w: {\n    x: 0,\n    y: -1\n  },\n  ArrowDown: {\n    x: 0,\n    y: 1\n  },\n  s: {\n    x: 0,\n    y: 1\n  },\n  ArrowLeft: {\n    x: -1,\n    y: 0\n  },\n  a: {\n    x: -1,\n    y: 0\n  },\n  ArrowRight: {\n    x: 1,\n    y: 0\n  },\n  d: {\n    x: 1,\n    y: 0\n  }\n};\nfunction SnakeGame() {\n  _s();\n  // Game state\n  const [snake, setSnake] = useState([{\n    x: 10,\n    y: 10\n  }]);\n  const [food, setFood] = useState({\n    x: 5,\n    y: 5\n  });\n  const [direction, setDirection] = useState({\n    x: 1,\n    y: 0\n  });\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isPaused, setIsPaused] = useState(false);\n  const [gridSize, setGridSize] = useState(GRID_SIZE);\n  const [touchStart, setTouchStart] = useState(null);\n  const [touchEnd, setTouchEnd] = useState(null);\n\n  // Refs\n  const lastRenderTimeRef = useRef(0);\n  const speed = useRef(INITIAL_SPEED);\n  const gameAreaRef = useRef(null);\n  const requestRef = useRef();\n\n  // Adjust grid size on window resize\n  useEffect(() => {\n    const handleResize = () => {\n      setGridSize(calculateGridSize());\n    };\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  // Generate food with collision check\n  const generateFood = useCallback(() => {\n    const newFood = {\n      x: Math.floor(Math.random() * gridSize),\n      y: Math.floor(Math.random() * gridSize)\n    };\n    if (snake.some(segment => segment.x === newFood.x && segment.y === newFood.y)) {\n      return generateFood();\n    }\n    return newFood;\n  }, [snake, gridSize]);\n\n  // Handle keyboard input\n  const handleKeyPress = useCallback(e => {\n    if (e.key === ' ') {\n      setIsPaused(prev => !prev);\n      return;\n    }\n    const newDirection = DIRECTIONS[e.key];\n    if (newDirection) {\n      // Prevent 180-degree turns\n      if (direction.x + newDirection.x !== 0 || direction.y + newDirection.y !== 0) {\n        setDirection(newDirection);\n      }\n    }\n  }, [direction]);\n\n  // Handle touch controls for mobile\n  const handleTouchStart = e => {\n    setTouchStart({\n      x: e.touches[0].clientX,\n      y: e.touches[0].clientY\n    });\n  };\n  const handleTouchMove = e => {\n    setTouchEnd({\n      x: e.touches[0].clientX,\n      y: e.touches[0].clientY\n    });\n  };\n  const handleTouchEnd = () => {\n    if (!touchStart || !touchEnd) return;\n    const xDiff = touchEnd.x - touchStart.x;\n    const yDiff = touchEnd.y - touchStart.y;\n\n    // Determine swipe direction\n    if (Math.abs(xDiff) > Math.abs(yDiff)) {\n      // Horizontal swipe\n      if (xDiff > 0 && direction.x !== -1) {\n        setDirection({\n          x: 1,\n          y: 0\n        }); // Right\n      } else if (xDiff < 0 && direction.x !== 1) {\n        setDirection({\n          x: -1,\n          y: 0\n        }); // Left\n      }\n    } else {\n      // Vertical swipe\n      if (yDiff > 0 && direction.y !== -1) {\n        setDirection({\n          x: 0,\n          y: 1\n        }); // Down\n      } else if (yDiff < 0 && direction.y !== 1) {\n        setDirection({\n          x: 0,\n          y: -1\n        }); // Up\n      }\n    }\n    setTouchStart(null);\n    setTouchEnd(null);\n  };\n\n  // Game loop using requestAnimationFrame\n  const gameLoop = useCallback(timestamp => {\n    if (gameOver || isPaused) return;\n    const deltaTime = timestamp - lastRenderTimeRef.current;\n    if (deltaTime >= speed.current) {\n      setSnake(prevSnake => {\n        const head = {\n          x: prevSnake[0].x + direction.x,\n          y: prevSnake[0].y + direction.y\n        };\n\n        // Check collisions\n        if (head.x < 0 || head.x >= gridSize || head.y < 0 || head.y >= gridSize || prevSnake.some(segment => segment.x === head.x && segment.y === head.y)) {\n          setGameOver(true);\n          return prevSnake;\n        }\n        const newSnake = [head, ...prevSnake];\n        if (head.x === food.x && head.y === food.y) {\n          setFood(generateFood());\n          setScore(prev => prev + 1);\n          speed.current = Math.max(50, INITIAL_SPEED - score * 2);\n        } else {\n          newSnake.pop();\n        }\n        return newSnake;\n      });\n      lastRenderTimeRef.current = timestamp;\n    }\n    requestRef.current = requestAnimationFrame(gameLoop);\n  }, [direction, food, gameOver, isPaused, generateFood, score, gridSize]);\n\n  // Set up and clean up game loop\n  useEffect(() => {\n    requestRef.current = requestAnimationFrame(gameLoop);\n    return () => cancelAnimationFrame(requestRef.current);\n  }, [gameLoop]);\n\n  // Event listeners\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [handleKeyPress]);\n\n  // Reset game\n  const resetGame = () => {\n    setSnake([{\n      x: 10,\n      y: 10\n    }]);\n    setFood(generateFood());\n    setDirection({\n      x: 1,\n      y: 0\n    });\n    setGameOver(false);\n    setScore(0);\n    speed.current = INITIAL_SPEED;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83D\\uDC0D Snake Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [\"Score: \", score]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), \" |\", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setIsPaused(prev => !prev),\n          children: isPaused ? 'Resume' : 'Pause'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), \" |\", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          children: \"Restart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: gameAreaRef,\n        className: \"game-area\",\n        style: {\n          width: gridSize * CELL_SIZE,\n          height: gridSize * CELL_SIZE,\n          position: 'relative',\n          margin: '0 auto',\n          border: '2px solid #000',\n          backgroundColor: '#f0f0f0'\n        },\n        onTouchStart: handleTouchStart,\n        onTouchMove: handleTouchMove,\n        onTouchEnd: handleTouchEnd,\n        children: [snake.map((segment, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'absolute',\n            left: segment.x * CELL_SIZE,\n            top: segment.y * CELL_SIZE,\n            width: CELL_SIZE,\n            height: CELL_SIZE,\n            backgroundColor: i === 0 ? '#2E8B57' : '#3CB371',\n            border: '1px solid #fff',\n            borderRadius: i === 0 ? '30%' : '15%',\n            transition: 'transform 0.1s ease',\n            transform: i === 0 ? 'scale(1.1)' : 'scale(1)'\n          }\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'absolute',\n            left: food.x * CELL_SIZE,\n            top: food.y * CELL_SIZE,\n            width: CELL_SIZE,\n            height: CELL_SIZE,\n            backgroundColor: '#FF6347',\n            borderRadius: '50%',\n            boxShadow: '0 0 5px rgba(0,0,0,0.3)'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-over\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Game Over! Final Score: \", score]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          className: \"play-again-button\",\n          children: \"Play Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Controls: \", window.innerWidth > 768 ? 'WASD/Arrow Keys' : 'Swipe', \" | Tap to pause\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n}\n_s(SnakeGame, \"K9zKsXyEldmtIcOZD+rwiPz6+w0=\");\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","jsxDEV","_jsxDEV","calculateGridSize","maxGridWidth","Math","floor","window","innerWidth","maxGridHeight","innerHeight","min","CELL_SIZE","GRID_SIZE","INITIAL_SPEED","DIRECTIONS","ArrowUp","x","y","w","ArrowDown","s","ArrowLeft","a","ArrowRight","d","SnakeGame","_s","snake","setSnake","food","setFood","direction","setDirection","gameOver","setGameOver","score","setScore","isPaused","setIsPaused","gridSize","setGridSize","touchStart","setTouchStart","touchEnd","setTouchEnd","lastRenderTimeRef","speed","gameAreaRef","requestRef","handleResize","addEventListener","removeEventListener","generateFood","newFood","random","some","segment","handleKeyPress","e","key","prev","newDirection","handleTouchStart","touches","clientX","clientY","handleTouchMove","handleTouchEnd","xDiff","yDiff","abs","gameLoop","timestamp","deltaTime","current","prevSnake","head","newSnake","max","pop","requestAnimationFrame","cancelAnimationFrame","resetGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","marginBottom","onClick","ref","width","height","position","margin","border","backgroundColor","onTouchStart","onTouchMove","onTouchEnd","map","i","left","top","borderRadius","transition","transform","boxShadow","_c","$RefreshReg$"],"sources":["D:/VScode/Snake_Game/snake-game/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport './App.css';\n\n// Dynamically calculate grid size and cell size\nconst calculateGridSize = () => {\n  const maxGridWidth = Math.floor(window.innerWidth * 0.8 / 20); // 80% of screen width\n  const maxGridHeight = Math.floor(window.innerHeight * 0.8 / 20); // 80% of screen height\n  return Math.min(maxGridWidth, maxGridHeight);\n};\n\nconst CELL_SIZE = 20; // Fixed cell size\nconst GRID_SIZE = calculateGridSize(); // Dynamic grid size\nconst INITIAL_SPEED = 100;\n\nconst DIRECTIONS = {\n  ArrowUp: { x: 0, y: -1 },\n  w: { x: 0, y: -1 },\n  ArrowDown: { x: 0, y: 1 },\n  s: { x: 0, y: 1 },\n  ArrowLeft: { x: -1, y: 0 },\n  a: { x: -1, y: 0 },\n  ArrowRight: { x: 1, y: 0 },\n  d: { x: 1, y: 0 }\n};\n\nfunction SnakeGame() {\n  // Game state\n  const [snake, setSnake] = useState([{ x: 10, y: 10 }]);\n  const [food, setFood] = useState({ x: 5, y: 5 });\n  const [direction, setDirection] = useState({ x: 1, y: 0 });\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isPaused, setIsPaused] = useState(false);\n  const [gridSize, setGridSize] = useState(GRID_SIZE);\n  const [touchStart, setTouchStart] = useState(null);\n  const [touchEnd, setTouchEnd] = useState(null);\n\n  // Refs\n  const lastRenderTimeRef = useRef(0);\n  const speed = useRef(INITIAL_SPEED);\n  const gameAreaRef = useRef(null);\n  const requestRef = useRef();\n\n  // Adjust grid size on window resize\n  useEffect(() => {\n    const handleResize = () => {\n      setGridSize(calculateGridSize());\n    };\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  // Generate food with collision check\n  const generateFood = useCallback(() => {\n    const newFood = {\n      x: Math.floor(Math.random() * gridSize),\n      y: Math.floor(Math.random() * gridSize),\n    };\n    \n    if (snake.some(segment => segment.x === newFood.x && segment.y === newFood.y)) {\n      return generateFood();\n    }\n    return newFood;\n  }, [snake, gridSize]);\n\n  // Handle keyboard input\n  const handleKeyPress = useCallback((e) => {\n    if (e.key === ' ') {\n      setIsPaused(prev => !prev);\n      return;\n    }\n\n    const newDirection = DIRECTIONS[e.key];\n    if (newDirection) {\n      // Prevent 180-degree turns\n      if (direction.x + newDirection.x !== 0 || direction.y + newDirection.y !== 0) {\n        setDirection(newDirection);\n      }\n    }\n  }, [direction]);\n\n  // Handle touch controls for mobile\n  const handleTouchStart = (e) => {\n    setTouchStart({\n      x: e.touches[0].clientX,\n      y: e.touches[0].clientY\n    });\n  };\n\n  const handleTouchMove = (e) => {\n    setTouchEnd({\n      x: e.touches[0].clientX,\n      y: e.touches[0].clientY\n    });\n  };\n\n  const handleTouchEnd = () => {\n    if (!touchStart || !touchEnd) return;\n    \n    const xDiff = touchEnd.x - touchStart.x;\n    const yDiff = touchEnd.y - touchStart.y;\n    \n    // Determine swipe direction\n    if (Math.abs(xDiff) > Math.abs(yDiff)) {\n      // Horizontal swipe\n      if (xDiff > 0 && direction.x !== -1) {\n        setDirection({ x: 1, y: 0 }); // Right\n      } else if (xDiff < 0 && direction.x !== 1) {\n        setDirection({ x: -1, y: 0 }); // Left\n      }\n    } else {\n      // Vertical swipe\n      if (yDiff > 0 && direction.y !== -1) {\n        setDirection({ x: 0, y: 1 }); // Down\n      } else if (yDiff < 0 && direction.y !== 1) {\n        setDirection({ x: 0, y: -1 }); // Up\n      }\n    }\n    \n    setTouchStart(null);\n    setTouchEnd(null);\n  };\n\n  // Game loop using requestAnimationFrame\n  const gameLoop = useCallback((timestamp) => {\n    if (gameOver || isPaused) return;\n    \n    const deltaTime = timestamp - lastRenderTimeRef.current;\n    \n    if (deltaTime >= speed.current) {\n      setSnake(prevSnake => {\n        const head = { \n          x: prevSnake[0].x + direction.x, \n          y: prevSnake[0].y + direction.y \n        };\n\n        // Check collisions\n        if (\n          head.x < 0 || head.x >= gridSize ||\n          head.y < 0 || head.y >= gridSize ||\n          prevSnake.some(segment => segment.x === head.x && segment.y === head.y)\n        ) {\n          setGameOver(true);\n          return prevSnake;\n        }\n\n        const newSnake = [head, ...prevSnake];\n        if (head.x === food.x && head.y === food.y) {\n          setFood(generateFood());\n          setScore(prev => prev + 1);\n          speed.current = Math.max(50, INITIAL_SPEED - (score * 2));\n        } else {\n          newSnake.pop();\n        }\n        return newSnake;\n      });\n      \n      lastRenderTimeRef.current = timestamp;\n    }\n    \n    requestRef.current = requestAnimationFrame(gameLoop);\n  }, [direction, food, gameOver, isPaused, generateFood, score, gridSize]);\n\n  // Set up and clean up game loop\n  useEffect(() => {\n    requestRef.current = requestAnimationFrame(gameLoop);\n    return () => cancelAnimationFrame(requestRef.current);\n  }, [gameLoop]);\n\n  // Event listeners\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [handleKeyPress]);\n\n  // Reset game\n  const resetGame = () => {\n    setSnake([{ x: 10, y: 10 }]);\n    setFood(generateFood());\n    setDirection({ x: 1, y: 0 });\n    setGameOver(false);\n    setScore(0);\n    speed.current = INITIAL_SPEED;\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>🐍 Snake Game</h1>\n        <div style={{ marginBottom: '10px' }}>\n          <strong>Score: {score}</strong> | \n          <button onClick={() => setIsPaused(prev => !prev)}>\n            {isPaused ? 'Resume' : 'Pause'}\n          </button> |\n          <button onClick={resetGame}>Restart</button>\n        </div>\n        \n        <div\n          ref={gameAreaRef}\n          className=\"game-area\"\n          style={{\n            width: gridSize * CELL_SIZE,\n            height: gridSize * CELL_SIZE,\n            position: 'relative',\n            margin: '0 auto',\n            border: '2px solid #000',\n            backgroundColor: '#f0f0f0',\n          }}\n          onTouchStart={handleTouchStart}\n          onTouchMove={handleTouchMove}\n          onTouchEnd={handleTouchEnd}\n        >\n          {snake.map((segment, i) => (\n            <div\n              key={i}\n              style={{\n                position: 'absolute',\n                left: segment.x * CELL_SIZE,\n                top: segment.y * CELL_SIZE,\n                width: CELL_SIZE,\n                height: CELL_SIZE,\n                backgroundColor: i === 0 ? '#2E8B57' : '#3CB371',\n                border: '1px solid #fff',\n                borderRadius: i === 0 ? '30%' : '15%',\n                transition: 'transform 0.1s ease',\n                transform: i === 0 ? 'scale(1.1)' : 'scale(1)'\n              }}\n            />\n          ))}\n          <div\n            style={{\n              position: 'absolute',\n              left: food.x * CELL_SIZE,\n              top: food.y * CELL_SIZE,\n              width: CELL_SIZE,\n              height: CELL_SIZE,\n              backgroundColor: '#FF6347',\n              borderRadius: '50%',\n              boxShadow: '0 0 5px rgba(0,0,0,0.3)'\n            }}\n          />\n        </div>\n\n        {gameOver && (\n          <div className=\"game-over\">\n            <h2>Game Over! Final Score: {score}</h2>\n            <button \n              onClick={resetGame}\n              className=\"play-again-button\"\n            >\n              Play Again\n            </button>\n          </div>\n        )}\n        \n        <p>Controls: {window.innerWidth > 768 ? 'WASD/Arrow Keys' : 'Swipe'} | Tap to pause</p>\n      </header>\n    </div>\n  );\n}\n\nexport default SnakeGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}