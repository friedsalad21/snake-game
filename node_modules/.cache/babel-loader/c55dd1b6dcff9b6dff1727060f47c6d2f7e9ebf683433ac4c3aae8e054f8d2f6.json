{"ast":null,"code":"var _jsxFileName = \"D:\\\\VScode\\\\Snake_Game\\\\snake-game\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\n\n// Game settings\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GRID_SIZE = 20;\nconst CELL_SIZE = 20;\nconst INITIAL_SPEED = 100; // Reduced from 150 for smoother movement\n\nfunction SnakeGame() {\n  _s();\n  // Game state\n  const [snake, setSnake] = useState([{\n    x: 10,\n    y: 10\n  }]);\n  const [food, setFood] = useState({\n    x: 5,\n    y: 5\n  });\n  const [direction, setDirection] = useState({\n    x: 1,\n    y: 0\n  });\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isPaused, setIsPaused] = useState(false);\n\n  // Refs for smooth animation\n  const requestRef = useRef();\n  const previousTimeRef = useRef();\n  const lastRenderTimeRef = useRef(0);\n  const speed = useRef(INITIAL_SPEED);\n\n  // Directions for both arrow keys and WASD\n  const DIRECTIONS = {\n    ArrowUp: {\n      x: 0,\n      y: -1\n    },\n    w: {\n      x: 0,\n      y: -1\n    },\n    ArrowDown: {\n      x: 0,\n      y: 1\n    },\n    s: {\n      x: 0,\n      y: 1\n    },\n    ArrowLeft: {\n      x: -1,\n      y: 0\n    },\n    a: {\n      x: -1,\n      y: 0\n    },\n    ArrowRight: {\n      x: 1,\n      y: 0\n    },\n    d: {\n      x: 1,\n      y: 0\n    }\n  };\n\n  // Generate food with collision check\n  const generateFood = useCallback(() => {\n    const newFood = {\n      x: Math.floor(Math.random() * GRID_SIZE),\n      y: Math.floor(Math.random() * GRID_SIZE)\n    };\n    if (snake.some(segment => segment.x === newFood.x && segment.y === newFood.y)) {\n      return generateFood();\n    }\n    return newFood;\n  }, [snake]);\n\n  // Handle keyboard input\n  const handleKeyPress = useCallback(e => {\n    if (e.key === ' ') {\n      setIsPaused(prev => !prev);\n      return;\n    }\n    const newDirection = DIRECTIONS[e.key];\n    if (newDirection) {\n      // Prevent 180Â° turns\n      if (direction.x + newDirection.x !== 0 || direction.y + newDirection.y !== 0) {\n        setDirection(newDirection);\n      }\n    }\n  }, [direction]);\n\n  // Game loop using requestAnimationFrame for smoother animation\n  const gameLoop = useCallback(timestamp => {\n    if (gameOver || isPaused) return;\n    const deltaTime = timestamp - lastRenderTimeRef.current;\n    if (deltaTime >= speed.current) {\n      setSnake(prevSnake => {\n        const head = {\n          x: prevSnake[0].x + direction.x,\n          y: prevSnake[0].y + direction.y\n        };\n\n        // Check collisions\n        if (head.x < 0 || head.x >= GRID_SIZE || head.y < 0 || head.y >= GRID_SIZE || prevSnake.some(segment => segment.x === head.x && segment.y === head.y)) {\n          setGameOver(true);\n          return prevSnake;\n        }\n        const newSnake = [head, ...prevSnake];\n        if (head.x === food.x && head.y === food.y) {\n          setFood(generateFood());\n          setScore(prev => prev + 1);\n          // Slightly increase speed as score increases\n          speed.current = Math.max(50, INITIAL_SPEED - score * 2);\n        } else {\n          newSnake.pop();\n        }\n        return newSnake;\n      });\n      lastRenderTimeRef.current = timestamp;\n    }\n    requestRef.current = requestAnimationFrame(gameLoop);\n  }, [direction, food, gameOver, isPaused, generateFood, score]);\n\n  // Set up and clean up game loop\n  useEffect(() => {\n    requestRef.current = requestAnimationFrame(gameLoop);\n    return () => cancelAnimationFrame(requestRef.current);\n  }, [gameLoop]);\n\n  // Keyboard event listener\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [handleKeyPress]);\n\n  // Reset game\n  const resetGame = () => {\n    setSnake([{\n      x: 10,\n      y: 10\n    }]);\n    setFood(generateFood());\n    setDirection({\n      x: 1,\n      y: 0\n    });\n    setGameOver(false);\n    setScore(0);\n    speed.current = INITIAL_SPEED;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      fontFamily: 'Arial',\n      userSelect: 'none' // Prevent text selection during gameplay\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uD83D\\uDC0D Smooth Snake Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), \" |\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsPaused(prev => !prev),\n        children: isPaused ? 'Resume' : 'Pause'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), \" |\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: GRID_SIZE * CELL_SIZE,\n        height: GRID_SIZE * CELL_SIZE,\n        border: '2px solid #333',\n        margin: '0 auto',\n        position: 'relative',\n        backgroundColor: '#f0f0f0',\n        overflow: 'hidden' // Cleaner rendering\n      },\n      children: [snake.map((segment, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          left: segment.x * CELL_SIZE,\n          top: segment.y * CELL_SIZE,\n          width: CELL_SIZE,\n          height: CELL_SIZE,\n          backgroundColor: i === 0 ? '#2E8B57' : '#3CB371',\n          // Better colors\n          border: '1px solid #fff',\n          borderRadius: i === 0 ? '30%' : '15%',\n          transition: 'transform 0.1s ease',\n          // Smooth movement effect\n          transform: i === 0 ? 'scale(1.1)' : 'scale(1)'\n        }\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          left: food.x * CELL_SIZE,\n          top: food.y * CELL_SIZE,\n          width: CELL_SIZE,\n          height: CELL_SIZE,\n          backgroundColor: '#FF6347',\n          borderRadius: '50%',\n          boxShadow: '0 0 5px rgba(0,0,0,0.3)'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px',\n        animation: 'fadeIn 0.5s ease'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Game Over! Final Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        style: {\n          padding: '8px 16px',\n          fontSize: '16px',\n          backgroundColor: '#4CAF50',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer'\n        },\n        children: \"Play Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Controls: WASD or Arrow Keys | Space to pause\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}\n_s(SnakeGame, \"w8vSNFneconnXHLPdHirlio6hlo=\");\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","jsxDEV","_jsxDEV","GRID_SIZE","CELL_SIZE","INITIAL_SPEED","SnakeGame","_s","snake","setSnake","x","y","food","setFood","direction","setDirection","gameOver","setGameOver","score","setScore","isPaused","setIsPaused","requestRef","previousTimeRef","lastRenderTimeRef","speed","DIRECTIONS","ArrowUp","w","ArrowDown","s","ArrowLeft","a","ArrowRight","d","generateFood","newFood","Math","floor","random","some","segment","handleKeyPress","e","key","prev","newDirection","gameLoop","timestamp","deltaTime","current","prevSnake","head","newSnake","max","pop","requestAnimationFrame","cancelAnimationFrame","window","addEventListener","removeEventListener","resetGame","style","textAlign","fontFamily","userSelect","children","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","onClick","width","height","border","margin","position","backgroundColor","overflow","map","i","left","top","borderRadius","transition","transform","boxShadow","marginTop","animation","padding","fontSize","color","cursor","_c","$RefreshReg$"],"sources":["D:/VScode/Snake_Game/snake-game/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\n\n// Game settings\nconst GRID_SIZE = 20;\nconst CELL_SIZE = 20;\nconst INITIAL_SPEED = 100; // Reduced from 150 for smoother movement\n\nfunction SnakeGame() {\n  // Game state\n  const [snake, setSnake] = useState([{ x: 10, y: 10 }]);\n  const [food, setFood] = useState({ x: 5, y: 5 });\n  const [direction, setDirection] = useState({ x: 1, y: 0 });\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isPaused, setIsPaused] = useState(false);\n  \n  // Refs for smooth animation\n  const requestRef = useRef();\n  const previousTimeRef = useRef();\n  const lastRenderTimeRef = useRef(0);\n  const speed = useRef(INITIAL_SPEED);\n\n  // Directions for both arrow keys and WASD\n  const DIRECTIONS = {\n    ArrowUp: { x: 0, y: -1 }, w: { x: 0, y: -1 },\n    ArrowDown: { x: 0, y: 1 }, s: { x: 0, y: 1 },\n    ArrowLeft: { x: -1, y: 0 }, a: { x: -1, y: 0 },\n    ArrowRight: { x: 1, y: 0 }, d: { x: 1, y: 0 }\n  };\n\n  // Generate food with collision check\n  const generateFood = useCallback(() => {\n    const newFood = {\n      x: Math.floor(Math.random() * GRID_SIZE),\n      y: Math.floor(Math.random() * GRID_SIZE),\n    };\n    if (snake.some(segment => segment.x === newFood.x && segment.y === newFood.y)) {\n      return generateFood();\n    }\n    return newFood;\n  }, [snake]);\n\n  // Handle keyboard input\n  const handleKeyPress = useCallback((e) => {\n    if (e.key === ' ') {\n      setIsPaused(prev => !prev);\n      return;\n    }\n    \n    const newDirection = DIRECTIONS[e.key];\n    if (newDirection) {\n      // Prevent 180Â° turns\n      if (direction.x + newDirection.x !== 0 || direction.y + newDirection.y !== 0) {\n        setDirection(newDirection);\n      }\n    }\n  }, [direction]);\n\n  // Game loop using requestAnimationFrame for smoother animation\n  const gameLoop = useCallback((timestamp) => {\n    if (gameOver || isPaused) return;\n    \n    const deltaTime = timestamp - lastRenderTimeRef.current;\n    \n    if (deltaTime >= speed.current) {\n      setSnake(prevSnake => {\n        const head = { \n          x: prevSnake[0].x + direction.x, \n          y: prevSnake[0].y + direction.y \n        };\n\n        // Check collisions\n        if (\n          head.x < 0 || head.x >= GRID_SIZE ||\n          head.y < 0 || head.y >= GRID_SIZE ||\n          prevSnake.some(segment => segment.x === head.x && segment.y === head.y)\n        ) {\n          setGameOver(true);\n          return prevSnake;\n        }\n\n        const newSnake = [head, ...prevSnake];\n        if (head.x === food.x && head.y === food.y) {\n          setFood(generateFood());\n          setScore(prev => prev + 1);\n          // Slightly increase speed as score increases\n          speed.current = Math.max(50, INITIAL_SPEED - (score * 2));\n        } else {\n          newSnake.pop();\n        }\n        return newSnake;\n      });\n      \n      lastRenderTimeRef.current = timestamp;\n    }\n    \n    requestRef.current = requestAnimationFrame(gameLoop);\n  }, [direction, food, gameOver, isPaused, generateFood, score]);\n\n  // Set up and clean up game loop\n  useEffect(() => {\n    requestRef.current = requestAnimationFrame(gameLoop);\n    return () => cancelAnimationFrame(requestRef.current);\n  }, [gameLoop]);\n\n  // Keyboard event listener\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [handleKeyPress]);\n\n  // Reset game\n  const resetGame = () => {\n    setSnake([{ x: 10, y: 10 }]);\n    setFood(generateFood());\n    setDirection({ x: 1, y: 0 });\n    setGameOver(false);\n    setScore(0);\n    speed.current = INITIAL_SPEED;\n  };\n\n  return (\n    <div style={{ \n      textAlign: 'center', \n      fontFamily: 'Arial',\n      userSelect: 'none' // Prevent text selection during gameplay\n    }}>\n      <h1>ð Smooth Snake Game</h1>\n      <div style={{ marginBottom: '10px' }}>\n        <strong>Score: {score}</strong> | \n        <button onClick={() => setIsPaused(prev => !prev)}>\n          {isPaused ? 'Resume' : 'Pause'}\n        </button> |\n        <button onClick={resetGame}>Restart</button>\n      </div>\n      <div\n        style={{\n          width: GRID_SIZE * CELL_SIZE,\n          height: GRID_SIZE * CELL_SIZE,\n          border: '2px solid #333',\n          margin: '0 auto',\n          position: 'relative',\n          backgroundColor: '#f0f0f0',\n          overflow: 'hidden' // Cleaner rendering\n        }}\n      >\n        {snake.map((segment, i) => (\n          <div\n            key={i}\n            style={{\n              position: 'absolute',\n              left: segment.x * CELL_SIZE,\n              top: segment.y * CELL_SIZE,\n              width: CELL_SIZE,\n              height: CELL_SIZE,\n              backgroundColor: i === 0 ? '#2E8B57' : '#3CB371', // Better colors\n              border: '1px solid #fff',\n              borderRadius: i === 0 ? '30%' : '15%',\n              transition: 'transform 0.1s ease', // Smooth movement effect\n              transform: i === 0 ? 'scale(1.1)' : 'scale(1)'\n            }}\n          />\n        ))}\n        <div\n          style={{\n            position: 'absolute',\n            left: food.x * CELL_SIZE,\n            top: food.y * CELL_SIZE,\n            width: CELL_SIZE,\n            height: CELL_SIZE,\n            backgroundColor: '#FF6347',\n            borderRadius: '50%',\n            boxShadow: '0 0 5px rgba(0,0,0,0.3)'\n          }}\n        />\n      </div>\n      {gameOver && (\n        <div style={{ \n          marginTop: '20px',\n          animation: 'fadeIn 0.5s ease'\n        }}>\n          <h2>Game Over! Final Score: {score}</h2>\n          <button \n            onClick={resetGame}\n            style={{\n              padding: '8px 16px',\n              fontSize: '16px',\n              backgroundColor: '#4CAF50',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: 'pointer'\n            }}\n          >\n            Play Again\n          </button>\n        </div>\n      )}\n      <p>Controls: WASD or Arrow Keys | Space to pause</p>\n    </div>\n  );\n}\n\nexport default SnakeGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}