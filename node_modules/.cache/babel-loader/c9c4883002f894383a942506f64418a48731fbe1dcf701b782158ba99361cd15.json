{"ast":null,"code":"var _jsxFileName = \"D:\\\\VScode\\\\Snake_Game\\\\snake-game\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\n\n// Game settings\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GRID_SIZE = 25;\nconst CELL_SIZE = Math.min(Math.floor(window.innerWidth * 0.8 / GRID_SIZE), 20);\nconst INITIAL_SPEED = 100;\nfunction SnakeGame() {\n  _s();\n  // Game state\n  const [snake, setSnake] = useState([{\n    x: 10,\n    y: 10\n  }]);\n  const [food, setFood] = useState({\n    x: 5,\n    y: 5\n  });\n  const [direction, setDirection] = useState({\n    x: 1,\n    y: 0\n  });\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isPaused, setIsPaused] = useState(false);\n  const [touchStart, setTouchStart] = useState(null);\n  const [touchEnd, setTouchEnd] = useState(null);\n\n  // Refs for game loop\n  const requestRef = useRef();\n  const lastRenderTimeRef = useRef(0);\n  const speed = useRef(INITIAL_SPEED);\n  const gameAreaRef = useRef(null);\n\n  // Directions\n  const DIRECTIONS = {\n    ArrowUp: {\n      x: 0,\n      y: -1\n    },\n    w: {\n      x: 0,\n      y: -1\n    },\n    ArrowDown: {\n      x: 0,\n      y: 1\n    },\n    s: {\n      x: 0,\n      y: 1\n    },\n    ArrowLeft: {\n      x: -1,\n      y: 0\n    },\n    a: {\n      x: -1,\n      y: 0\n    },\n    ArrowRight: {\n      x: 1,\n      y: 0\n    },\n    d: {\n      x: 1,\n      y: 0\n    }\n  };\n\n  // Generate food with collision check\n  const generateFood = useCallback(() => {\n    const newFood = {\n      x: Math.floor(Math.random() * GRID_SIZE),\n      y: Math.floor(Math.random() * GRID_SIZE)\n    };\n    if (snake.some(segment => segment.x === newFood.x && segment.y === newFood.y)) {\n      return generateFood();\n    }\n    return newFood;\n  }, [snake]);\n\n  // Handle keyboard input\n  const handleKeyPress = useCallback(e => {\n    if (e.key === ' ') {\n      setIsPaused(prev => !prev);\n      return;\n    }\n    const newDirection = DIRECTIONS[e.key];\n    if (newDirection) {\n      // Prevent 180Â° turns\n      if (direction.x + newDirection.x !== 0 || direction.y + newDirection.y !== 0) {\n        setDirection(newDirection);\n      }\n    }\n  }, [direction]);\n\n  // Handle touch events for mobile controls\n  const handleTouchStart = e => {\n    setTouchStart({\n      x: e.touches[0].clientX,\n      y: e.touches[0].clientY\n    });\n  };\n  const handleTouchMove = e => {\n    setTouchEnd({\n      x: e.touches[0].clientX,\n      y: e.touches[0].clientY\n    });\n  };\n  const handleTouchEnd = () => {\n    if (!touchStart || !touchEnd) return;\n    const xDiff = touchEnd.x - touchStart.x;\n    const yDiff = touchEnd.y - touchStart.y;\n\n    // Determine swipe direction\n    if (Math.abs(xDiff) > Math.abs(yDiff)) {\n      // Horizontal swipe\n      if (xDiff > 0 && direction.x !== -1) {\n        setDirection({\n          x: 1,\n          y: 0\n        }); // Right\n      } else if (xDiff < 0 && direction.x !== 1) {\n        setDirection({\n          x: -1,\n          y: 0\n        }); // Left\n      }\n    } else {\n      // Vertical swipe\n      if (yDiff > 0 && direction.y !== -1) {\n        setDirection({\n          x: 0,\n          y: 1\n        }); // Down\n      } else if (yDiff < 0 && direction.y !== 1) {\n        setDirection({\n          x: 0,\n          y: -1\n        }); // Up\n      }\n    }\n    setTouchStart(null);\n    setTouchEnd(null);\n  };\n\n  // Game loop using requestAnimationFrame\n  const gameLoop = useCallback(timestamp => {\n    if (gameOver || isPaused) return;\n    const deltaTime = timestamp - lastRenderTimeRef.current;\n    if (deltaTime >= speed.current) {\n      setSnake(prevSnake => {\n        const head = {\n          x: prevSnake[0].x + direction.x,\n          y: prevSnake[0].y + direction.y\n        };\n\n        // Check collisions\n        if (head.x < 0 || head.x >= GRID_SIZE || head.y < 0 || head.y >= GRID_SIZE || prevSnake.some(segment => segment.x === head.x && segment.y === head.y)) {\n          setGameOver(true);\n          return prevSnake;\n        }\n        const newSnake = [head, ...prevSnake];\n        if (head.x === food.x && head.y === food.y) {\n          setFood(generateFood());\n          setScore(prev => prev + 1);\n          speed.current = Math.max(50, INITIAL_SPEED - score * 2);\n        } else {\n          newSnake.pop();\n        }\n        return newSnake;\n      });\n      lastRenderTimeRef.current = timestamp;\n    }\n    requestRef.current = requestAnimationFrame(gameLoop);\n  }, [direction, food, gameOver, isPaused, generateFood, score]);\n\n  // Set up and clean up game loop\n  useEffect(() => {\n    requestRef.current = requestAnimationFrame(gameLoop);\n    return () => cancelAnimationFrame(requestRef.current);\n  }, [gameLoop]);\n\n  // Event listeners\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [handleKeyPress]);\n\n  // Reset game\n  const resetGame = () => {\n    setSnake([{\n      x: 10,\n      y: 10\n    }]);\n    setFood(generateFood());\n    setDirection({\n      x: 1,\n      y: 0\n    });\n    setGameOver(false);\n    setScore(0);\n    speed.current = INITIAL_SPEED;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      fontFamily: 'Arial',\n      userSelect: 'none',\n      touchAction: 'none',\n      maxWidth: '100vw',\n      overflow: 'hidden'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uD83D\\uDC0D Snake Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), \" |\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsPaused(prev => !prev),\n        children: isPaused ? 'Resume' : 'Pause'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), \" |\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: gameAreaRef,\n      style: {\n        width: GRID_SIZE * CELL_SIZE,\n        height: GRID_SIZE * CELL_SIZE,\n        border: '2px solid #333',\n        margin: '0 auto',\n        position: 'relative',\n        backgroundColor: '#f0f0f0',\n        overflow: 'hidden',\n        touchAction: 'none'\n      },\n      onTouchStart: handleTouchStart,\n      onTouchMove: handleTouchMove,\n      onTouchEnd: handleTouchEnd,\n      children: [snake.map((segment, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          left: segment.x * CELL_SIZE,\n          top: segment.y * CELL_SIZE,\n          width: CELL_SIZE,\n          height: CELL_SIZE,\n          backgroundColor: i === 0 ? '#2E8B57' : '#3CB371',\n          border: '1px solid #fff',\n          borderRadius: i === 0 ? '30%' : '15%',\n          transition: 'transform 0.1s ease',\n          transform: i === 0 ? 'scale(1.1)' : 'scale(1)'\n        }\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          left: food.x * CELL_SIZE,\n          top: food.y * CELL_SIZE,\n          width: CELL_SIZE,\n          height: CELL_SIZE,\n          backgroundColor: '#FF6347',\n          borderRadius: '50%',\n          boxShadow: '0 0 5px rgba(0,0,0,0.3)'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px',\n        animation: 'fadeIn 0.5s ease'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Game Over! Final Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        style: {\n          padding: '8px 16px',\n          fontSize: '16px',\n          backgroundColor: '#4CAF50',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer'\n        },\n        children: \"Play Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Controls: \", window.innerWidth > 768 ? 'WASD/Arrow Keys' : 'Swipe', \" | Tap to pause\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n}\n_s(SnakeGame, \"WeGrQm1el3kexmFngBCmSQTZ4jA=\");\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","jsxDEV","_jsxDEV","GRID_SIZE","CELL_SIZE","Math","min","floor","window","innerWidth","INITIAL_SPEED","SnakeGame","_s","snake","setSnake","x","y","food","setFood","direction","setDirection","gameOver","setGameOver","score","setScore","isPaused","setIsPaused","touchStart","setTouchStart","touchEnd","setTouchEnd","requestRef","lastRenderTimeRef","speed","gameAreaRef","DIRECTIONS","ArrowUp","w","ArrowDown","s","ArrowLeft","a","ArrowRight","d","generateFood","newFood","random","some","segment","handleKeyPress","e","key","prev","newDirection","handleTouchStart","touches","clientX","clientY","handleTouchMove","handleTouchEnd","xDiff","yDiff","abs","gameLoop","timestamp","deltaTime","current","prevSnake","head","newSnake","max","pop","requestAnimationFrame","cancelAnimationFrame","addEventListener","removeEventListener","resetGame","style","textAlign","fontFamily","userSelect","touchAction","maxWidth","overflow","children","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","onClick","ref","width","height","border","margin","position","backgroundColor","onTouchStart","onTouchMove","onTouchEnd","map","i","left","top","borderRadius","transition","transform","boxShadow","marginTop","animation","padding","fontSize","color","cursor","_c","$RefreshReg$"],"sources":["D:/VScode/Snake_Game/snake-game/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\n\n// Game settings\nconst GRID_SIZE = 25;\nconst CELL_SIZE = Math.min(Math.floor(window.innerWidth * 0.8 / GRID_SIZE), 20);\nconst INITIAL_SPEED = 100;\n\nfunction SnakeGame() {\n  // Game state\n  const [snake, setSnake] = useState([{ x: 10, y: 10 }]);\n  const [food, setFood] = useState({ x: 5, y: 5 });\n  const [direction, setDirection] = useState({ x: 1, y: 0 });\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isPaused, setIsPaused] = useState(false);\n  const [touchStart, setTouchStart] = useState(null);\n  const [touchEnd, setTouchEnd] = useState(null);\n  \n  // Refs for game loop\n  const requestRef = useRef();\n  const lastRenderTimeRef = useRef(0);\n  const speed = useRef(INITIAL_SPEED);\n  const gameAreaRef = useRef(null);\n\n  // Directions\n  const DIRECTIONS = {\n    ArrowUp: { x: 0, y: -1 }, w: { x: 0, y: -1 },\n    ArrowDown: { x: 0, y: 1 }, s: { x: 0, y: 1 },\n    ArrowLeft: { x: -1, y: 0 }, a: { x: -1, y: 0 },\n    ArrowRight: { x: 1, y: 0 }, d: { x: 1, y: 0 }\n  };\n\n  // Generate food with collision check\n  const generateFood = useCallback(() => {\n    const newFood = {\n      x: Math.floor(Math.random() * GRID_SIZE),\n      y: Math.floor(Math.random() * GRID_SIZE),\n    };\n    if (snake.some(segment => segment.x === newFood.x && segment.y === newFood.y)) {\n      return generateFood();\n    }\n    return newFood;\n  }, [snake]);\n\n  // Handle keyboard input\n  const handleKeyPress = useCallback((e) => {\n    if (e.key === ' ') {\n      setIsPaused(prev => !prev);\n      return;\n    }\n    \n    const newDirection = DIRECTIONS[e.key];\n    if (newDirection) {\n      // Prevent 180Â° turns\n      if (direction.x + newDirection.x !== 0 || direction.y + newDirection.y !== 0) {\n        setDirection(newDirection);\n      }\n    }\n  }, [direction]);\n\n  // Handle touch events for mobile controls\n  const handleTouchStart = (e) => {\n    setTouchStart({\n      x: e.touches[0].clientX,\n      y: e.touches[0].clientY\n    });\n  };\n\n  const handleTouchMove = (e) => {\n    setTouchEnd({\n      x: e.touches[0].clientX,\n      y: e.touches[0].clientY\n    });\n  };\n\n  const handleTouchEnd = () => {\n    if (!touchStart || !touchEnd) return;\n    \n    const xDiff = touchEnd.x - touchStart.x;\n    const yDiff = touchEnd.y - touchStart.y;\n    \n    // Determine swipe direction\n    if (Math.abs(xDiff) > Math.abs(yDiff)) {\n      // Horizontal swipe\n      if (xDiff > 0 && direction.x !== -1) {\n        setDirection({ x: 1, y: 0 }); // Right\n      } else if (xDiff < 0 && direction.x !== 1) {\n        setDirection({ x: -1, y: 0 }); // Left\n      }\n    } else {\n      // Vertical swipe\n      if (yDiff > 0 && direction.y !== -1) {\n        setDirection({ x: 0, y: 1 }); // Down\n      } else if (yDiff < 0 && direction.y !== 1) {\n        setDirection({ x: 0, y: -1 }); // Up\n      }\n    }\n    \n    setTouchStart(null);\n    setTouchEnd(null);\n  };\n\n  // Game loop using requestAnimationFrame\n  const gameLoop = useCallback((timestamp) => {\n    if (gameOver || isPaused) return;\n    \n    const deltaTime = timestamp - lastRenderTimeRef.current;\n    \n    if (deltaTime >= speed.current) {\n      setSnake(prevSnake => {\n        const head = { \n          x: prevSnake[0].x + direction.x, \n          y: prevSnake[0].y + direction.y \n        };\n\n        // Check collisions\n        if (\n          head.x < 0 || head.x >= GRID_SIZE ||\n          head.y < 0 || head.y >= GRID_SIZE ||\n          prevSnake.some(segment => segment.x === head.x && segment.y === head.y)\n        ) {\n          setGameOver(true);\n          return prevSnake;\n        }\n\n        const newSnake = [head, ...prevSnake];\n        if (head.x === food.x && head.y === food.y) {\n          setFood(generateFood());\n          setScore(prev => prev + 1);\n          speed.current = Math.max(50, INITIAL_SPEED - (score * 2));\n        } else {\n          newSnake.pop();\n        }\n        return newSnake;\n      });\n      \n      lastRenderTimeRef.current = timestamp;\n    }\n    \n    requestRef.current = requestAnimationFrame(gameLoop);\n  }, [direction, food, gameOver, isPaused, generateFood, score]);\n\n  // Set up and clean up game loop\n  useEffect(() => {\n    requestRef.current = requestAnimationFrame(gameLoop);\n    return () => cancelAnimationFrame(requestRef.current);\n  }, [gameLoop]);\n\n  // Event listeners\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [handleKeyPress]);\n\n  // Reset game\n  const resetGame = () => {\n    setSnake([{ x: 10, y: 10 }]);\n    setFood(generateFood());\n    setDirection({ x: 1, y: 0 });\n    setGameOver(false);\n    setScore(0);\n    speed.current = INITIAL_SPEED;\n  };\n\n  return (\n    <div style={{ \n      textAlign: 'center', \n      fontFamily: 'Arial',\n      userSelect: 'none',\n      touchAction: 'none',\n      maxWidth: '100vw',\n      overflow: 'hidden'\n    }}>\n      <h1>ð Snake Game</h1>\n      <div style={{ marginBottom: '10px' }}>\n        <strong>Score: {score}</strong> | \n        <button onClick={() => setIsPaused(prev => !prev)}>\n          {isPaused ? 'Resume' : 'Pause'}\n        </button> |\n        <button onClick={resetGame}>Restart</button>\n      </div>\n      \n      {/* Game area with touch controls */}\n      <div\n        ref={gameAreaRef}\n        style={{\n          width: GRID_SIZE * CELL_SIZE,\n          height: GRID_SIZE * CELL_SIZE,\n          border: '2px solid #333',\n          margin: '0 auto',\n          position: 'relative',\n          backgroundColor: '#f0f0f0',\n          overflow: 'hidden',\n          touchAction: 'none'\n        }}\n        onTouchStart={handleTouchStart}\n        onTouchMove={handleTouchMove}\n        onTouchEnd={handleTouchEnd}\n      >\n        {snake.map((segment, i) => (\n          <div\n            key={i}\n            style={{\n              position: 'absolute',\n              left: segment.x * CELL_SIZE,\n              top: segment.y * CELL_SIZE,\n              width: CELL_SIZE,\n              height: CELL_SIZE,\n              backgroundColor: i === 0 ? '#2E8B57' : '#3CB371',\n              border: '1px solid #fff',\n              borderRadius: i === 0 ? '30%' : '15%',\n              transition: 'transform 0.1s ease',\n              transform: i === 0 ? 'scale(1.1)' : 'scale(1)'\n            }}\n          />\n        ))}\n        <div\n          style={{\n            position: 'absolute',\n            left: food.x * CELL_SIZE,\n            top: food.y * CELL_SIZE,\n            width: CELL_SIZE,\n            height: CELL_SIZE,\n            backgroundColor: '#FF6347',\n            borderRadius: '50%',\n            boxShadow: '0 0 5px rgba(0,0,0,0.3)'\n          }}\n        />\n      </div>\n\n      {gameOver && (\n        <div style={{ \n          marginTop: '20px',\n          animation: 'fadeIn 0.5s ease'\n        }}>\n          <h2>Game Over! Final Score: {score}</h2>\n          <button \n            onClick={resetGame}\n            style={{\n              padding: '8px 16px',\n              fontSize: '16px',\n              backgroundColor: '#4CAF50',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: 'pointer'\n            }}\n          >\n            Play Again\n          </button>\n        </div>\n      )}\n      \n      <p>Controls: {window.innerWidth > 768 ? 'WASD/Arrow Keys' : 'Swipe'} | Tap to pause</p>\n    </div>\n  );\n}\n\nexport default SnakeGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}